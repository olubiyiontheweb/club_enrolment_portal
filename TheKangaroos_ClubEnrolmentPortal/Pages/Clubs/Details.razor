@page "/clubDetail/{id}"
@* @page "/club" *@

@using TheKangaroos_ClubEnrolmentPortal.Data.Models
@using TheKangaroos_ClubEnrolmentPortal.Data.Services
@inherits OwningComponentBase<ClubService>
@inject NavigationManager MyNavigationManager
@inject MembershipService MembershipService
@using System.Security.Claims


<div class="detail-page">
    <div class="header shadow">
        <div class="content">
            <h1 class="page-heading">@club.Name</h1>
            <div class="membership">
                @if (IsMember())
                {
                    <span><i class="fa-solid fa-circle-check text-success mr-2"></i>Member</span>
                }
                else
                {
                    <span><i class="fa-solid fa-circle-xmark text-danger mr-2"></i>Non-Member <a class="ml-2 btn-link"
                        @onclick="ApplyMembership"><u>Join this Club</u></a></span>
                }
            </div>

        </div>
        @if (@club.Image != null)
        {
            <img class="header-img" src="@club.Image">
        }
    </div>
    <div class="row">
        <div class="col-12 col-xl-9">
            <p class="description">@club.Description</p>
            <hr>
            <div class="events">
                <div class="d-flex justify-content-between">
                    <h4 class="font-weight-bold text-secondary">Upcoming Events</h4>
                    <a href="clubDetail/@club.Id/events">View All Events</a>
                </div>
                <div class="row">
                    @{
                        int count = 0;
                    }
                    @foreach (var item in events)
                    {
                        @if (item.StartDate > DateTime.Now)
                        {
                            count += 1;
                            <EventItem id="@item.Id" Name="@item.Name" StartDate="@item.StartDate" EndDate="@item.EndDate"
                        Location="@item.Location" Image="@item.Image" CreatedByClub="@item.CreatedByClub"
                        TicketsAvailable="@item.TicketsAvailable" />
                        }
                    }

                </div>
                @if (count == 0)
                {
                    <p class="text-secondary">No Upcoming events for this club</p>
                }
            </div>
            <hr>
            <div>
                <a href="clubDetail/@club.Id/members">See All Members</a>
            </div>
        </div>
        <div class="col-12 col-xl-3">
            <div class="sidebar bg-fifth-color-light shadow p-3">
                <h4 class="font-weight-bold text-secondary text-center mb-4">Notices</h4>
                @if (news.Count > 0)
                {
                    @for (int i = 0; i < 4 && i < news.Count(); i++)
                    {
                        News item = news[i];
                        <div class="hover-card card mb-3 p-3 border-none">
                            <div class="card-content">
                                <h5>@item.Title</h5>
                                <p class="mb-0">
                                    @item.Description
                                </p>
                            </div>
                            <div class="hover-card-view-all">
                                Read More
                            </div>
                        </div>
                    }
                }
                <div class="text-center">
                    <a href="noticeList">View All Notices</a>
                </div>
            </div>
        </div>
    </div>

</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    [Parameter]
    public string id { get; set; }
    private Club club;
    private List<Event> events;
    private string userId { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        userId = authState.User.FindFirst(ClaimTypes.NameIdentifier).Value;
    }

    protected override void OnInitialized()
    {
        club = Service.GetClubByIdAsync(id);
        events = Service.GetEventsByClubIdAsync(id);
    }

    private bool IsMember()
    {
        return MembershipService.IsMember(userId, id);
    }

    private void ApplyMembership()
    {
        Membership membership = new Membership
        {
            @*UserId = userId,*@
            UserId = userId,
            ClubId = id,
        };
        MembershipService.PostMembershipAsync(membership);
        @*MyNavigationManager.NavigateTo(MyNavigationManager.Uri, true);*@
    }

    IList<News> news = new List<News>
{
new News {
id = 1,
Title = "Title 1",
Type = "Event",
Description = "Demo Description"
},
new News {
id = 2,
Title = "Title 2",
Type = "Announcement",
Description = "Demo Description"
},
new News {
id = 3,
Title = "Title 3",
Type = "Event",
Description = "Demo Description"
},
new News {
id = 4,
Title = "Title 4",
Type = "Announcement",
Description = "Demo Description"
},
};

    class News
    {
        public int id { get; set; }

        public string Title { get; set; }
        public string Type { get; set; }
        public string Description { get; set; }
    }
}
