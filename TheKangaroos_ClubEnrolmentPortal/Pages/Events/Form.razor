@page "/event/create"
@page "/event/edit/{id}"
@using TheKangaroos_ClubEnrolmentPortal.Data.Models
@using TheKangaroos_ClubEnrolmentPortal.Data.Services
@inherits OwningComponentBase<EventService>
@inject NavigationManager MyNavigationManager
@inject ClubService ClubService

@inject NavigationManager NavManager

@if (MyNavigationManager.Uri.Contains("create"))
{
    <h3 class="text-center font-weight-bold text-secondary">Create an Event</h3>
}
else
{
    <h3 class="text-center font-weight-bold text-secondary">Edit Event</h3>
}

<div class="row justify-content-center mt-5">
    <div class="col-12 col-lg-6">
        <div class="card p-4">
            <EditForm Model="@newevents" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="Name" class="control-label  text-secondary font-weight-bold">Event Name</label>
                    <InputText id="Name" class="form-control" @bind-Value="newevents.Name" />
                </div>
                <div class="form-group">
                    <label for="Description" class="control-label  text-secondary font-weight-bold">Event
                        Description</label>
                    <InputTextArea id="Description" class="form-control" @bind-Value="newevents.Description" />
                </div>
                <div class="form-group">
                    <label for="StartDate" class="control-label  text-secondary font-weight-bold">Start Date</label>
                    <InputDate type="datetime-local" id="StartDate" class="form-control"
                        @bind-Value="newevents.StartDate" />
                </div>
                <div class="form-group">
                    <label for="EndDate" class="control-label  text-secondary font-weight-bold">End Date</label>
                    <InputDate type="datetime-local" id="EndDate" class="form-control" @bind-Value="newevents.EndDate" />
                </div>
                <div class="form-group">
                    <label for="Location" class="control-label  text-secondary font-weight-bold">Event Location</label>
                    <InputText id="Location" class="form-control" @bind-Value="newevents.Location" />
                </div>
                <div class="form-group">
                    <label for="Image" class="control-label  text-secondary font-weight-bold">Event Banner</label>
                    <InputFile id="Image" class="form-control-file" @bind-Value="newevents.Image" />
                </div>
                <div class="form-group">
                    <label for="CreatedByClubId" class="control-label">Club</label>
                    <InputSelect id="department" @bind-Value="@newevents.CreatedByClubId" class="form-control">
                    <option>----</option>
                        @foreach (var club in clubs)
                        {
                            <option value="@club.Id">@club.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group text-center">
                    <input type="submit" value="Create" class="btn btn-primary" />
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private Event newevents = new Event();

    private void HandleValidSubmit()
    {
        Console.WriteLine("Valid");
        Event events = new Event
        {
            Name = newevents.Name,
            Description = newevents.Description,
            StartDate = newevents.StartDate,
            EndDate = newevents.EndDate,
            Location = newevents.Location,
            Image = newevents.Image,
            CreatedByClubId = newevents.CreatedByClubId,
        };
        if (MyNavigationManager.Uri.Contains("create"))
        {
            Service.PostEventAsync(events);
            NavManager.NavigateTo("/eventList", true);
        }
        else
        {
            NavManager.NavigateTo("/eventDetail/{id}", true);
        }

    }

    private List<Club> clubs;

    protected override void OnInitialized()
    {
        clubs = ClubService.GetClubsAsync();
    }

    [Parameter]
    public string id { get; set; }
}